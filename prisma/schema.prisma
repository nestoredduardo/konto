generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Accounts {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Sessions {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         Users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Users {
  id              String        @id @default(cuid())
  name            String?
  email           String?       @unique
  phone           String?       @unique
  walletAvailable Float?        @default(0)
  walletSecured   Float?        @default(0)
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  groups          Groups[]
  usersGroups     UsersGroups[]
  accounts        Accounts[]
  sessions        Sessions[]

  @@map(name: "users")
}

model Services {
  id        String   @id @default(cuid())
  name      String
  price     Float
  value     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  plans     Plans[]

  @@map(name: "services")
}

model Plans {
  id        String   @id @default(cuid())
  adminGet  Float
  joinerPay Float
  maxUsers  Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  service   Services @relation(fields: [serviceId], references: [id])
  serviceId String
  groups    Groups[]

  @@map(name: "plans")
}

model Groups {
  id                 String        @id @default(cuid())
  verified           Boolean       @default(false)
  credentialEmail    String
  credentialPassword String
  createdAt          DateTime      @default(now()) @map("created_at")
  updatedAt          DateTime      @updatedAt @map("updated_at")
  admin              Users         @relation(fields: [adminId], references: [id])
  adminId            String
  plan               Plans         @relation(fields: [planId], references: [id])
  planId             String
  usersGroups        UsersGroups[]

  @@map(name: "groups")
}

model UsersGroups {
  id          String   @id @default(cuid())
  joinedAt    DateTime @default(now())
  periodStart DateTime
  periodEnd   DateTime
  securityEnd DateTime
  user        Users    @relation(fields: [userId], references: [id])
  userId      String
  group       Groups   @relation(fields: [groupId], references: [id])
  groupId     String

  @@map(name: "usersGroups")
}
