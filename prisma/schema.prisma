generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model User {
  id               String       @id @default(cuid())
  name             String?
  email            String?      @unique
  phone            String?      @unique
  walletAvailable  Float        @default(0)
  createdAt        DateTime     @default(now()) @map("created_at")
  updatedAt        DateTime     @updatedAt @map("updated_at")
  emailVerified    DateTime?    @map("email_verified")
  image            String?
  phoneVerified    Boolean?
  verificationCode String?
  isAdmin          Boolean      @default(false)
  accounts         Account[]
  groups           Group[]
  sessions         Session[]
  usersGroups      UserGroup[]
  senders          Transfer[]   @relation("sender")
  receivers        Transfer[]   @relation("receiver")
  deposits         Deposit[]
  withdrawals      Withdrawal[]

  @@map("users")
}

model Service {
  id        String   @id @default(cuid())
  name      String
  price     Float
  value     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  plan      Plan[]

  @@map("services")
}

model Plan {
  id        String   @id @default(cuid())
  adminGet  Float
  joinerPay Float
  maxUsers  Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  serviceId String
  service   Service  @relation(fields: [serviceId], references: [id])
  groups    Group[]

  @@map("plans")
}

model Group {
  id                 String      @id @default(cuid())
  verified           Boolean     @default(false)
  credentialEmail    String
  credentialPassword String
  createdAt          DateTime    @default(now()) @map("created_at")
  updatedAt          DateTime    @updatedAt @map("updated_at")
  adminId            String
  planId             String
  admin              User        @relation(fields: [adminId], references: [id])
  plan               Plan        @relation(fields: [planId], references: [id])
  userGroups         UserGroup[]

  @@map("groups")
}

model UserGroup {
  id                String         @id @default(cuid())
  joinedAt          DateTime       @default(now())
  periodStart       DateTime
  periodEnd         DateTime
  userId            String
  groupId           String
  state             UserGroupState
  cancelAt          DateTime?
  cancelAtPeriodEnd Boolean        @default(false)
  canceledAt        DateTime?
  endedAt           DateTime?
  group             Group          @relation(fields: [groupId], references: [id])
  user              User           @relation(fields: [userId], references: [id])
  invoices          Invoice[]

  @@map("userGroups")
}

model Transfer {
  id         String            @id @default(cuid())
  amount     Float
  senderId   String
  receiverId String
  status     TransactionStatus
  createdAt  DateTime          @default(now()) @map("created_at")
  updatedAt  DateTime          @updatedAt @map("updated_at")
  sender     User              @relation("sender", fields: [senderId], references: [id])
  receiver   User              @relation("receiver", fields: [receiverId], references: [id])
  invoice    Invoice?

  @@map("transfers")
}

model Deposit {
  id              String            @id @default(cuid())
  amount          Float
  userId          String
  status          TransactionStatus
  paymentMethodId String
  keyInfo         String
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  user            User              @relation(fields: [userId], references: [id])
  paymentMethod   PaymentMethod     @relation(fields: [paymentMethodId], references: [id])

  @@map("deposits")
}

model Withdrawal {
  id              String            @id @default(cuid())
  amount          Float
  userId          String
  status          TransactionStatus
  paymentMethodId String
  keyInfo         String
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  user            User              @relation(fields: [userId], references: [id])
  paymentMethod   PaymentMethod     @relation(fields: [paymentMethodId], references: [id])

  @@map("withdrawals")
}

model Invoice {
  id                 String    @id @default(cuid())
  userGroupId        String
  transferId         String    @unique
  invoicePeriodStart DateTime
  invoicePeriodEnd   DateTime
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")
  userGroup          UserGroup @relation(fields: [userGroupId], references: [id])
  transfer           Transfer  @relation(fields: [transferId], references: [id])

  @@map("invoices")
}

model PaymentMethod {
  id          String            @id @default(cuid())
  name        String
  type        PaymentMethodType
  keyInfo     String
  withdrawals Withdrawal[]
  deposits    Deposit[]

  @@map("paymentMethods")
}

enum UserGroupState {
  PENDING
  ACTIVE
  INACTIVE
}

enum TransactionStatus {
  VALIDATING
  VALID
  INVALID
}

enum PaymentMethodType {
  BBVA
  BCP
  INTERBANK
  YAPE
}
