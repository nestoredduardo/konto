generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model User {
  id               String         @id @default(cuid())
  name             String
  email            String         @unique
  phone            String?        @unique
  username         String?        @unique
  balance          Float          @default(0)
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")
  emailVerified    DateTime?      @map("email_verified")
  image            String?
  phoneVerified    Boolean?
  verificationCode String?
  isAdmin          Boolean        @default(false)
  accounts         Account[]
  groups           Group[]
  sessions         Session[]
  subscriptions    Subscription[]
  senders          Transfer[]     @relation("sender")
  receivers        Transfer[]     @relation("receiver")
  deposits         Deposit[]
  withdrawals      Withdrawal[]
  paymentOrders    PaymentOrder[]
  invoices         Invoice[]

  @@map("users")
}

model Service {
  id        String        @id @default(cuid())
  service   ServiceSupply @default(DISNEY)
  name      String
  price     Float
  value     String
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")
  plan      Plan[]

  @@map("services")
}

model Plan {
  id        String   @id @default(cuid())
  adminGet  Float
  joinerPay Float
  maxUsers  Int
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  serviceId String
  service   Service  @relation(fields: [serviceId], references: [id])
  groups    Group[]

  @@map("plans")
}

model Group {
  id                 String         @id @default(cuid())
  verified           Boolean        @default(false)
  credentialEmail    String
  credentialPassword String
  isActive           Boolean        @default(true)
  createdAt          DateTime       @default(now()) @map("created_at")
  updatedAt          DateTime       @updatedAt @map("updated_at")
  adminId            String
  planId             String
  admin              User           @relation(fields: [adminId], references: [id])
  plan               Plan           @relation(fields: [planId], references: [id])
  subscriptions      Subscription[]

  @@map("groups")
}

model Subscription {
  id                String            @id @default(cuid())
  joinedAt          DateTime          @default(now())
  periodStart       DateTime
  periodEnd         DateTime
  userId            String
  groupId           String
  state             SubscriptionState
  cancelAt          DateTime?
  cancelAtPeriodEnd Boolean           @default(false)
  canceledAt        DateTime?
  endedAt           DateTime?
  group             Group             @relation(fields: [groupId], references: [id])
  user              User              @relation(fields: [userId], references: [id])
  invoices          Invoice[]
  paymentOrders     PaymentOrder[]

  @@map("subscriptions")
}

model Transfer {
  id           String            @id @default(cuid())
  amount       Float
  senderId     String
  receiverId   String
  status       TransactionStatus
  createdAt    DateTime          @default(now()) @map("created_at")
  updatedAt    DateTime          @updatedAt @map("updated_at")
  sender       User              @relation("sender", fields: [senderId], references: [id])
  receiver     User              @relation("receiver", fields: [receiverId], references: [id])
  invoice      Invoice?
  paymentOrder PaymentOrder?

  @@map("transfers")
}

model Deposit {
  id              String            @id @default(cuid())
  movementType    MovementType      @default(DEPOSIT)
  amount          Float
  userId          String
  status          TransactionStatus
  paymentMethodId String
  keyInfo         String
  depositType     DepositType       @default(WALLET)
  typeInfo        String?
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  user            User              @relation(fields: [userId], references: [id])
  paymentMethod   PaymentMethod     @relation(fields: [paymentMethodId], references: [id])

  @@map("deposits")
}

model Withdrawal {
  id              String            @id @default(cuid())
  movementType    MovementType      @default(WITHDRAWAL)
  amount          Float
  userId          String
  status          TransactionStatus
  paymentMethodId String
  keyInfo         String
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  user            User              @relation(fields: [userId], references: [id])
  paymentMethod   PaymentMethod     @relation(fields: [paymentMethodId], references: [id])

  @@map("withdrawals")
}

model Invoice {
  id                 String       @id @default(cuid())
  movementType       MovementType @default(INVOICE)
  userId             String
  subscriptionId     String
  transferId         String       @unique
  invoicePeriodStart DateTime
  invoicePeriodEnd   DateTime
  createdAt          DateTime     @default(now()) @map("created_at")
  updatedAt          DateTime     @updatedAt @map("updated_at")
  user               User         @relation(fields: [userId], references: [id])
  subscription       Subscription @relation(fields: [subscriptionId], references: [id])
  transfer           Transfer     @relation(fields: [transferId], references: [id])

  @@map("invoices")
}

model PaymentOrder {
  id             String             @id @default(cuid())
  movementType   MovementType       @default(PAYMENT_ORDER)
  userId         String
  subscriptionId String
  transferId     String?            @unique
  status         PaymentOrderStatus @default(PENDING)
  paymentDate    DateTime
  createdAt      DateTime           @default(now()) @map("created_at")
  updatedAt      DateTime           @updatedAt @map("updated_at")
  user           User               @relation(fields: [userId], references: [id])
  subscription   Subscription       @relation(fields: [subscriptionId], references: [id])
  transfer       Transfer?          @relation(fields: [transferId], references: [id])

  @@map("paymentorders")
}

model PaymentMethod {
  id          String            @id @default(cuid())
  name        String
  type        PaymentMethodType
  keyInfo     String
  withdrawals Withdrawal[]
  deposits    Deposit[]

  @@map("paymentMethods")
}

enum ServiceSupply {
  DISNEY
  HBO
  NETFLIX
  CRUNCHYROLL
}

enum SubscriptionState {
  PENDING
  ACTIVE
  INACTIVE
}

enum TransactionStatus {
  VALIDATING
  VALID
  INVALID
}

enum PaymentMethodType {
  BBVA
  BCP
  INTERBANK
  YAPE
}

enum DepositType {
  SUBSCRIPTION
  WALLET
  TRANSFER
}

enum PaymentOrderStatus {
  REJECTED
  PENDING
  DONE
}

enum MovementType {
  INVOICE
  PAYMENT_ORDER
  DEPOSIT
  WITHDRAWAL
}
